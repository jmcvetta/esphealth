'''
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                  ESP Health
                                Django Settings


Configuration settings for the ESP application.  Passwords and other private 
information are stored in external plain text files.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''


import os
import sys
import logging


#===============================================================================
#
#                                 Credentials
#
#===============================================================================
TOPDIR = os.path.dirname(__file__)
secret_key_path =  os.path.join(TOPDIR, 'secret_key.txt')
try:
    SECRET_KEY = open(secret_key_path).readline().strip()
except IOError:
    print >> sys.stderr, \
'''
Cannot find "%s".

Please create this file.

It should contain a secret key for this particular ESP installation. Used to 
provide a seed in secret-key hashing algorithms. Set this to a random string 
-- the longer, the better. 

The unix utility 'pwgen is useful for generating long random password strings.
''' % secret_key_path
    sys.exit(1001)
db_pwd_path =  os.path.join(TOPDIR, 'database_password.txt')
try:
    DATABASE_PASSWORD = open(db_pwd_path).readline().strip()
except IOError:
    print >> sys.stderr, \
'''
Cannot find "%s".

Please create this file, and populate it with your database password.
''' % db_pwd_path
    sys.exit(1002)



#===============================================================================
#
#                                   General
#
#===============================================================================
# Set DEBUG to False when running in production!
DEBUG = True 
# No error control, because version.txt is included with source.
version_path =  os.path.join(TOPDIR, 'version.txt')
VERSION = open(version_path).readline().strip()
CODEDIR = TOPDIR
TEMPLATE_DEBUG = DEBUG
ADMINS = (
    ('Jason McVetta', 'jason.mcvetta@channing.harvard.edu'),
    ('Ross Lazarus', 'ross.lazarus@channing.harvard.edu'),
    ('Raphael Lullis', 'raphael.lullis@channing.harvard.edu'),
)
MANAGERS = ADMINS
SITE_NAME = 'Development (localhost)' # Name of your local site
DATA_DIR = '/srv/esp'
#
# Some EMR systems, for instance Atrius Healthcare, include "fake" patients -- 
# test entries referring to fictional patients and events.  The variables below
# allow you to filter "fake" patients out of case reports (generated by 
# "case_report" command).  Any patient whose surname or MRN match the corresponding
# regex will be excluded.  The regular expression dialect to be used is that of the 
# underlying database platform.  
#
FAKE_PATIENT_SURNAME = '^XB' # Starts with 'XB' -- not case sensitive
FAKE_PATIENT_MRN = None
# 





#===============================================================================
#
#                                   Database
#
#===============================================================================
DATABASE_ENGINE = 'postgresql_psycopg2'
DATABASE_NAME = 'esp_prod'          
DATABASE_USER = 'esp'
DATABASE_HOST = 'localhost'
DATABASE_PORT = ''
DATABASE_OPTIONS = {
    # Make PostgreSQL recover gracefully from caught exceptions
    #"autocommit": True,
}


#===============================================================================
#
#                                     ETL
#
#===============================================================================
# ETL_SOURCE determines what loader will be used.  Valid choices are:
#    'epic'
#    'hl7'
#    None
ETL_SOURCE = 'epic'
ETL_USE_FTP = True # Use built-in FTP function to retrieve Epic files
ETL_ARCHIVE = True # Should ETL files be archived after they have been loaded?


#===============================================================================
#
#                                     FTP
#
#===============================================================================
FTP_SERVER = 'n2ftp001.hvma.org'
FTP_USER = 'HEALTHONE\\rlazarus'
ftp_pwd_path =  os.path.join(TOPDIR, 'ftp_password.txt')
try:
    FTP_PASSWORD = open(ftp_pwd_path).readline().strip()
except IOError:
    print >> sys.stderr, \
'''
Cannot find "%s".

Please create this file, and populate it with your FTP password.
''' % ftp_pwd_path
    sys.exit(1003)


#===============================================================================
#
#                                     FTP
#
#===============================================================================
FTP_SERVER = 'n2ftp001.hvma.org'
FTP_USER = 'HEALTHONE\\rlazarus'
ftp_pwd_path =  os.path.join(TOPDIR, 'ftp_password.txt')
try:
    FTP_PASSWORD = open(ftp_pwd_path).readline().strip()
except IOError:
    print >> sys.stderr, \
'''
Cannot find "%s".

Please create this file, and populate it with your FTP password.
''' % ftp_pwd_path
    sys.exit(1003)



#===============================================================================
#
#                                Miscellaneous
#
#===============================================================================
HL7_DIR = os.path.join(DATA_DIR, 'hl7')
SITE_ID = 1
TIME_ZONE = 'America/New_York'
LANGUAGE_CODE = 'en-us'
DATE_FORMAT = '%d %b %Y'
ROWS_PER_PAGE = 25
# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = os.path.join(TOPDIR, 'media')
# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = '/media'
# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/admin-media/'
# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source'
)
MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'ESP.urls'
LOGIN_URL = '/login'
TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'ESP.conf.context_processors.path_definitions' 
    )
TEMPLATE_DIRS = (
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(TOPDIR, 'templates'),
    os.path.join(TOPDIR, 'templates/esp'),
    os.path.join(TOPDIR, 'templates/pages/vaers'),
    os.path.join(TOPDIR, 'templates/pages/ss')
)
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.admin',
    'ESP.static', 
    'ESP.conf', 
    'ESP.emr',
    'ESP.hef',
    'ESP.nodis',
    'ESP.vaers',
    'ESP.ss',
    'ESP.ui',
)

#===============================================================================
#
#                               Case Generation
#
#===============================================================================
REPORT_RX_DAYS_BEFORE = 7
REPORT_RX_DAYS_AFTER = 14
REPORT_LX_DAYS_BEFORE = 30
REPORT_LX_DAYS_AFTER = 30
REPORT_ICD9_DAYS_BEFORE = 14
REPORT_ICD9_DAYS_AFTER = 14

# Default set of ICD9 codes to report
DEFAULT_REPORTABLE_ICD9S = [
    '780.6A', 
    '782.4', 
    '783.0', 
    '780.79B', 
    '789.00', 
    '789.01', 
    '789.02', 
    '789.03', 
    '789.04', 
    '789.05', 
    '789.06', 
    '789.07', 
    '789.08', 
    '789.09', 
    '787.01',
    '787.02',
    '787.03',
    '787.91',
    ]
    

#===============================================================================
#
#                               Case Reporting
#
#===============================================================================
CASE_REPORT_OUTPUT_FOLDER = os.path.join(DATA_DIR, 'case_reports')
CASE_REPORT_MDPH = True # Use MDPH case report output
CASE_REPORT_TEMPLATE = 'odh_hl7.txt'
CASE_REPORT_FILENAME_FORMAT = '%(timestamp)s-%(serial_number)s.hl7'
CASE_REPORT_BATCH_SIZE = 30 # Integer or None
#
# What transmission system should we use to report this case?  
# Valid choices are:
#    atrius
#    metrohealth
CASE_REPORT_TRANSMIT = 'atrius' 




#===============================================================================
#
#                                    Email
#
#===============================================================================
SERVER_EMAIL = 'esp-noreply@your_domain.com'
DEFAULT_FROM_EMAIL = 'esp-noreply@your_domain.com'
EMAIL_SUBJECT_PREFIX = '[ESP] '
EMAIL_HOST = 'localhost'
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_PORT = ''
EMAIL_USE_TLS = False


#===============================================================================
#
#                                 VAERS
#
#===============================================================================
VAERS_NOTIFICATION_RECIPIENT = 'someone@example.com'


#===============================================================================
#
#                                    JAVA
#
#===============================================================================
JAVA_DIR = "/usr/bin"
JAVA_JAR_DIR = '/usr/share/java'
def app_full_path(folder):
    return os.path.realpath(os.path.join(TOPDIR, folder))
def java_full_path(folder):
    return os.path.join(JAVA_JAR_DIR, folder)
JAVA_JARS = [
    java_full_path('axis.jar'),
    java_full_path('commons-logging.jar'), 
    java_full_path('commons-discovery.jar'), 
    java_full_path('jaxrpc.jar'), 
    java_full_path('wsdl4j.jar'), 
    java_full_path('saaj.jar'), 
    java_full_path('axis-ant.jar'), 
    java_full_path('log4j-1.2.jar'),
    app_full_path('axis-1_4/activation.jar'),
    app_full_path('axis-1_4/mail.jar'),
    app_full_path('sendMsgs/bcdc.jar'),
    app_full_path('sendMsgs')
    ]
#    javaclass=" /home/ESP/ESP/sendMsgs:/home/ESP/axis-1_4/activation.jar:/usr/local/axis-1_4/lib/axis.jar:/usr/local/axis-1_4/lib/commons-logging-1.0.4.jar:/usr/local/axis-1_4/lib/commons-discovery-0.2.jar:/usr/local/axis-1_4/lib/jaxrpc.jar:/usr/local/axis-1_4/lib/wsdl4j-1.5.1.jar:/usr/local/axis-1_4/lib/saaj.jar:/usr/local/axis-1_4/lib/axis-ant.jar:/usr/local/axis-1_4/lib/log4j-1.2.8.jar:/home/ESP/axis-1_4/mail.jar:/home/ESP/ESP/sendMsgs/bcdc.jar  "
JAVA_CLASSPATH = " %s " % ':'.join([str(jar) for jar in JAVA_JARS])




#===============================================================================
#
#--- ~~~ Logging Configuration ~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LOG_FILE = '/var/log/esp' # Used only if LOG_LEVEL_FILE != None
LOG_FORMAT_CONSOLE = '%(levelname)s:%(module)s:%(funcName)s:%(lineno)d: %(message)s'
LOG_FORMAT_FILE = '%(asctime)s:%(levelname)s:%(module)s:%(funcName)s:%(lineno)d: %(message)s'
LOG_FORMAT_SYSLOG = 'ESP:%(levelname)s:%(module)s:%(funcName)s:%(lineno)d: %(message)s'
# BEWARE: If you set the log level to DEBUG, *copious* info will be logged!
LOG_LEVEL_CONSOLE = logging.DEBUG
LOG_LEVEL_FILE = None
LOG_LEVEL_SYSLOG = logging.WARN

