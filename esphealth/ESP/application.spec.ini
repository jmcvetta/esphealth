#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                              ESP Configuration
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


[ General ]
# Django built-in DEBUG option -- does NOT control logging level.  Always set
# this to False when running a production server.  NOTE: some code may
# purposely not catch exceptions when DEBUG is true, allowing them crash the
# application.
django_debug = boolean(default=False)
site_name = string(min=1, default='Your Site Name')
# system status is D for debugging, P for production
system_status = string(min=1 default='D')
# ESP must have read/write permissions on data folder
data_folder = string(min=1, default='/srv/esp-data/')
# Admins are emailed when there is an error
admins = string_list(min=1, default=list('your_email@your_host.com', 'another_email@your_host.com'))
# Managers are emailed a copy of the daily status report, if it is enabled in the Batch section
managers = string_list(min=1, default=list('your_email@your_host.com', 'another_email@your_host.com'))
time_zone = string(default='America/New_York')
language_code = string(default='en-us')
date_format = string(default='%d %b %Y')
# Number of records to query at a time.  Larger number should provide greater 
# performance at the expense of memory usage.  Set to -1 to use Django default 
# QuerySet behavior.
queryset_iterator_chunksize = integer(default=10000)


[ Database ]
# Engine can be:
#     'django.db.backends.postgresql_psycopg2'
#     'django.db.backends.postgresql'
#     'django.db.backends.mysql'
#     'django.db.backends.sqlite3'
#     'django.db.backends.ado_mssql'
#     'doj.backends.zxjdbc.postgresql'
engine = option('django.db.backends.postgresql_psycopg2', 'django.db.backends.postgresql', 'django.db.backends.mysql', 'django.db.backends.sqlite3', 'django.db.backends.ado_mssql', 'doj.backends.zxjdbc.postgresql', default='django.db.backends.postgresql_psycopg2')
db_name = string(min=1, default='your_db_name')
username = string(min=1, default='your_db_username')
host = string(min=1, default='localhost')
# PostgreSQL uses port 5432.  If you use a different DB engine, you will need to change this setting
port = integer(default='5432')
transaction_row_limit = integer(default=100)

[ Batch ]
# Should we use built-in ETL function?
etl = boolean(default=False)
mail_status_report = boolean(default=True)
# report types handled are NODIS, VAERS or BOTH
status_report_type = string(default='NODIS')
generate_case_report = boolean(default=True)
transmit_case_report = boolean(default=False)


[ Web ]
# Number of rows to display in a table
rows_per_page = integer(default=25)
# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
media_url = string(default='/media')
# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
admin_media_prefix = string(default='/admin-media/')
# Path for login -- will need to be changed if ESP is not running at site root.
# For instance, if ESP is running at www.myhost.com/foobar/, then change
# login_url to '/foobar/login'.
login_url = string(default='/login')


[ ETL ]
# What kind of files are we loading?  Valid options are 'epic' and 'hl7'.
source = option('epic', 'hl7', default='epic')
# Should we fetch ETL files from FTP?
retrieve_files = boolean(default=False)
# Should we fetch ETL files from SFTP?
use_sftp = boolean(default=False)
# Should files be put in archive folder after processing?
archive = boolean(default=False)
# Login details your FTP server to fetch ETL files
server = string(default='your_etl_server')
username = string(default='your_username')
path = string(default='/path/on/ftp/server')
# Login details your SFTP server to fetch ETL files
sftp_server = string(default='your_sftp_etl_server')
sftp_port= string(default='22')
sftp_username = string(default='your_sftp_username')
sftp_path = string(default='/path/on/sftp/server')
# supports load swapping med name with directions as with metrohealth 2.0 data
medname_field7 = boolean(default=False)
# Should null dates be replaced by filename dates
use_filename_date = boolean(default=True)
load_report_dir = string(default='/path/for/load_reports/')

[ Reporting ]
# Produce case reports in special MDPH dialect of HL7?
use_mdph_format = boolean(default=False) 
# Template to use when generating (non-MDPH) case reports
template = string(default='odh_hl7.txt')
filename_format = string(default='%(timestamp)s-%(serial_number)s.hl7')
# Maximum number of cases to report per message.  If there are more cases, the
# set will be split into several messages.  A value of 0 reports all cases in a
# single message.
cases_per_message = integer(default=20)
# How should case reports be transmitted?  Supported values are 'ftp' and
# 'atrius', where 'atrius' indicates a use of an Atrius-specific upload method.
# More transports will be added in a future release.
transport = option('script','ftp', 'java', default='ftp')
transport_script = string(default='/path/to/your_upload_script -arg1 -arg2')
# Some EMR systems, for instance Atrius Healthcare, include "fake" patients -- 
# test entries referring to fictional patients and events.  The variables below
# allow you to filter "fake" patients out of case reports (generated by 
# "case_report" command).  Any patient whose surname or MRN match the corresponding
# regex will be excluded.  The regular expression dialect to be used is that of the 
# underlying database platform.  
fake_patient_surname = string(default='')
fake_patient_mrn = string(default='')
# Login details for FTP server to which reports will b sent
upload_server = string(default='your_upload_server')
upload_username = string(default='your_upload_username')
upload_path = string(default='your_upload_path')
# Login details for FTP server to which PHINMS messages will b sent
phinms_server = string(default='your_phinms_server')
phinms_username = string(default='your_phinms_username')
phinms_path = string(default='your_phinms_path')
# Path to vaers line listing reports (PHI and no-PHI)
# Must exist and must have esp read-write access
# Default value is ESP home directory, fine for test and dev
# Alternative below is suggestion for production implementation
# vaers_linelist_path = string(default='/srv/download/')
vaers_linelist_path = string(default='/home/esp/')
# Is sending AE reports via PHIN-MS enabled?
# set to True to use this feature
vaers_send_report = string(default='False')
# Is the EMR updated via the transcription interface when a VAERS report is transmitted to CDC?
vaers_update_emr = string(default='True')
# Login details for FTP server where transcription interface messages will be sent
update_emr_server = string(default='your_update_ftp_server')
update_emr_username = string(default='your_update_ftp_username')
update_emr_path = string(default='your_update_ftp_path')
# If set, send “suspected vaccine AE” message to the specified provider instead of the normal reviewer
# This must be a valid "Natural_Key" value from the EMR_PROVIDER table, with corresponding data to identify the override clinician reviewer
vaers_override_clinician_reviewer = string(default='')
# The VAERS autosender is the clinician identified by the site as the point of contact for auto-sent vaers reports.
vaers_autosender = string(default='')
# filtering case reports by these center ids
filter_centers = string_list(min=0)

[ Email ]
host = string(default='localhost')
port = integer(default=25)
username = string(default='')
use_tls = boolean(default=False)
server_email = string(default='esp-no-reply@your_host.com')
default_from_email = string(default='esp-no-reply@your_host.com')
subject_prefix = string(default='[ESP] ')


[ SS ]
email_recipient = string(min=1, default='their_email@their_host.com')


[ Logging ]
# ESP must have write permission for the log file
log_file = string(default='/var/log/esp.log')
# NOTE: If you set log level to DEBUG, *copious* info will be logged!
log_level_console = option('debug', 'info', 'warning', 'error', 'critical', default='warning')
log_level_file = option('debug', 'info', 'warning', 'error', 'critical', default='warning')
log_level_syslog = option('debug', 'info', 'warning', 'error', 'critical', default='warning')
# Log progress every N rows.   '-1' to log progress every row
row_log_count = integer(default=-1)
# See http://docs.python.org/library/logging.html#formatter
log_format_console = string(default='%(levelname)s:%(module)s:%(funcName)s:%(lineno)d: %(message)s')
log_format_file = string(default='%(asctime)s:%(levelname)s:%(module)s:%(funcName)s:%(lineno)d: %(message)s')
log_format_syslog = string(default='ESP:%(levelname)s:%(module)s:%(funcName)s:%(lineno)d: %(message)s')

[ HEF ]
thread_count = integer(default=0)

[Site]
case_report_site_name = string(default='HVMA')
site_clia = string(default='22D0666230')
site_last_name = string(default='Jones')
site_first_name = string(default='Michael')
site_address1 = string(default='133 Brookline Avenue')
site_address2 = string(default=None)
site_city = string(default='Boston')
site_state = string(default='MA')
site_zip = string(default='02215')
site_country = string(default='USA')
site_email = string(default='mjones@partners.org')
site_area_code = string(default='617')
site_tel_numeric = string(default='5099991')
site_tel_ext = string(default=None)
site_app_name = string(default='ESPv3')
site_sending_facility = string(default='Test')
site_comments = string(default='')

[Make_Fakes]
load_driver_labs = boolean(default=False)
start_date = string(default='2009/01/01')
end_date = string(default='TODAY')
population_size = integer(default=100)

# if min and <item>per_patient are >0 and same it will generate that amount
# if min < than <item>per_patient it will generate a random number of object in that range
min_encounters_per_patient = integer(default=1)
encounters_per_patient = integer(default=6)

#it will generate a % of encounters with random number of icd9s between 0 and maxicd9
maxicd9 = integer(default=4)
icd9_code_pct = integer(default=80)

min_lab_tests_per_patient = integer(default=1)
lab_tests_per_patient = integer(default=5)

min_lab_orders_per_patient = integer(default=1)
lab_orders_per_patient = integer(default=3)

min_meds_per_patient = integer(default=1)
meds_per_patient = integer(default=4)

immunization_pct = integer(default=30)
immunizations_per_patient = integer(default=3)

max_pregnancies = integer(default=6)
currently_preg_pct = float(default=0.5)

max_allergies = integer(default=1)
max_problems = integer(default=1)
max_socialhistory = integer(default=1)

max_diabetes = integer(default=1)
max_ili = integer(default=1)
max_diabetes_ili = integer(default=1)


